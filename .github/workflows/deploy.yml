name: Deploy PriceHawk

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for deployment (e.g. v1.0.0)'
        required: false
        default: 'v1.0.0'

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --force
      
      - name: Create .env file
        run: |
          echo "NODE_ENV=production" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_APP_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_APP_VERSION=1.0.0" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
          echo "SENDGRID_FROM_EMAIL=${{ secrets.SENDGRID_FROM_EMAIL }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "REDIS_TOKEN=${{ secrets.REDIS_TOKEN }}" >> .env
          echo "ENABLE_REAL_TIME_SCRAPING=true" >> .env
          echo "ENABLE_SCHEDULED_CHECKS=true" >> .env
          echo "ENABLE_SUBSCRIPTIONS=true" >> .env
          echo "ENABLE_EMAIL_NOTIFICATIONS=true" >> .env
      
      # Skip database migrations in CI/CD 
      - name: Skip database migrations
        run: |
          echo "Skipping database migrations in CI/CD pipeline"
          echo "Migrations should be run manually on the server after deployment"
      
      - name: Build application
        run: npm run build
      
      # Deploy Next.js build files to SiteGround via FTP
      - name: Deploy Next.js build to SiteGround via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.SITEGROUND_FTP_SERVER }}
          username: ${{ secrets.SITEGROUND_FTP_USERNAME }}
          password: ${{ secrets.SITEGROUND_FTP_PASSWORD }}
          local-dir: ./.next/
          server-dir: /public_html/
      
      # Deploy restart PHP script at the exact correct path
      - name: Deploy restart PHP script to SiteGround via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.SITEGROUND_FTP_SERVER }}
          username: ${{ secrets.SITEGROUND_FTP_USERNAME }}
          password: ${{ secrets.SITEGROUND_FTP_PASSWORD }}
          local-dir: ./public/
          server-dir: /
      
      # Create deployment marker for cron job to detect
      - name: Create deployment marker directory and file
        run: |
          mkdir -p deployment-marker
          echo "Deployment timestamp: $(date)" > deployment-marker/.deployment-marker

      # Upload deployment marker to trigger the cron job restart
      - name: Upload deployment marker
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.SITEGROUND_FTP_SERVER }}
          username: ${{ secrets.SITEGROUND_FTP_USERNAME }}
          password: ${{ secrets.SITEGROUND_FTP_PASSWORD }}
          local-dir: ./deployment-marker/
          server-dir: /public_html/

      - name: Deployment completed
        run: |
          echo "Next.js build deployed successfully via FTP"
          echo "Deployment marker uploaded to trigger cron job restart"
          echo "The cron job will automatically:"
          echo "- cd ~/public_html"
          echo "- npm install --production"
          echo "- pm2 restart pricehawk (or start if not running)"
          echo ""
          echo "Your application will be restarted within the next few minutes."
